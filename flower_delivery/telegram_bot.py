import os
import sys
import django
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã Python –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackContext, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)
from core.models import Product, Order, OrderItem, UserProfile
from django.conf import settings
from django.contrib.auth.models import User
from django.db import IntegrityError
from django.core.exceptions import ObjectDoesNotExist
from asgiref.sync import sync_to_async


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("bot_logs.log")
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
# (ASKING_FULL_NAME, ASKING_PHONE, ASKING_ADDRESS0) = range(3)
# (SELECT_PRODUCT, SELECT_QUANTITY, ASKING_CUSTOM_QUANTITY, ASKING_ADDRESS, ORDER_CONFIRMATION) = range(5)
(ASKING_FULL_NAME, ASKING_PHONE, ASKING_ADDRESS0, INFO_CONFIRMATION, SELECT_PRODUCT, SELECT_QUANTITY, ASKING_CUSTOM_QUANTITY, ASKING_ADDRESS, ORDER_CONFIRMATION) = range(9)

# –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
WORKING_HOURS_START = 9
WORKING_HOURS_END = 23

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN
ADMIN_TELEGRAM_CHAT_ID = os.getenv("ADMIN_TELEGRAM_CHAT_ID")
application = Application.builder().token(TELEGRAM_BOT_TOKEN).read_timeout(5).write_timeout(5).build()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_within_working_hours() -> bool:
    now = datetime.now().time()
    return WORKING_HOURS_START <= now.hour < WORKING_HOURS_END

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message_with_keyboard(chat_id, text, keyboard, context):
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {update.message.from_user.username}")
    keyboard = [
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        ],
        [
            InlineKeyboardButton("üåπ –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
            InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')
        ],
        [InlineKeyboardButton("üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order')]
    ]
    if update.message.chat_id == int(ADMIN_TELEGRAM_CHAT_ID):
        keyboard.append([InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data='manage_orders')])
    await send_message_with_keyboard(
        update.message.chat_id,
        "   –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n–≤ `Flower Delivery Bot`!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        keyboard,
        context,
    )

# async def handle_catalog(update: Update, context: CallbackContext) -> None:
#     """Redirect user to the catalog page."""
#     query = update.callback_query
#     await query.answer()
#     await query.message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: http://127.0.0.1:8000")

async def handle_catalog(update: Update, context: CallbackContext) -> None:
    """Redirect user to the catalog page."""
    query = update.callback_query
    await query.answer()
    try:
        await query.message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: http://127.0.0.1:8000")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞—Ç–∞–ª–æ–≥–µ: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_status(update: Update, context: CallbackContext) -> None:
    """Redirect user to the order status page."""
    query = update.callback_query
    await query.answer()
    try:
        await query.message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "
                                       "—Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: http://127.0.0.1:8000/profile")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ c—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞. "
                                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_help(update: Update, context: CallbackContext) -> None:
    """Provide help instructions for the user."""
    query = update.callback_query
    await query.answer()
    help_message = (
        "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É —Ü–≤–µ—Ç–æ–≤:*\n"
        "0. –ù–∞–∂–º–∏—Ç–µ '*üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*' –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–∫–∞–∑–∞ `—Ü–≤–µ—Ç–æ–≤üåπ`.\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '*üõç –ó–∞–∫–∞–∑–∞—Ç—å*' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö `—Ü–≤–µ—Ç–æ–≤üåπ`.\n"
        "2. *–í—ã–±–µ—Ä–∏—Ç–µ* `—Ç–æ–≤–∞—Ä(–±—É–∫–µ—Ç,—Ü–≤–µ—Ç–æ–∫üåπ)` –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
        "3. –£–∫–∞–∂–∏—Ç–µ *–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*.\n"
        "4. *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ* –í–∞—à –∑–∞–∫–∞–∑.\n"
        "5. *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å* –∑–∞–∫–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é '*üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞*'.\n\n"
        "*–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏*."
    )
    await query.message.reply_text(help_message, parse_mode='Markdown')

async def handle_register(update: Update, context: CallbackContext) -> int:
    user_chat_id = update.effective_chat.id
    username = update.effective_user.username

    if not username:
        await update.effective_message.reply_text("–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –¢–µ–ª–µ–≥—Ä–∞–º.")
        return ConversationHandler.END

    user, created = await sync_to_async(User.objects.get_or_create)(
        username=username,
        defaults={
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name,
            'email': f"{username}@example.com"
        }
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç user –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['user'] = user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile, created_profile = await sync_to_async(UserProfile.objects.get_or_create)(
        user=user,
        defaults={
            'telegram_chat_id': user_chat_id,
            'full_name': None,
            'phone': None,
            'delivery_address': None,
        }
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if created_profile:
        await update.effective_message.reply_text(f"{update.effective_user.first_name}, –í—ã —É—Å–ø–µ—à–Ω–æ *–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã*!\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)*:", parse_mode="Markdown")
        return ASKING_FULL_NAME  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        if user_profile.full_name is None:
            await update.effective_message.reply_text(f"{update.effective_user.first_name}, –í—ã *—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã* –≤ —Å–∏—Å—Ç–µ–º–µ!\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)*:", parse_mode="Markdown")
            return ASKING_FULL_NAME  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        else:
            await update.effective_message.reply_text(f"{update.effective_user.first_name}, –í—ã *—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã* –≤ —Å–∏—Å—Ç–µ–º–µ, –∏ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω!\n"
                                                      "–ï—Å–ª–∏ –í–∞–º *–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å* –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å"
                                                  " –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –µ–µ –≤ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ "
                                                  "–Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.", parse_mode="Markdown")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω


async def ask_full_name(update: Update, context: CallbackContext) -> int:
    full_name = update.message.text
    context.user_data['full_name'] = full_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

    await update.message.reply_text(f"{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:", parse_mode="Markdown")
    return ASKING_PHONE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

async def ask_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text
    context.user_data['phone'] = phone  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

    await update.message.reply_text(f"{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*:", parse_mode="Markdown")
    return ASKING_ADDRESS0  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏


async def ask_address(update: Update, context: CallbackContext) -> int:
    try:
        delivery_address = update.message.text
        context.user_data['delivery_address'] = delivery_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        phone = context.user_data.get('phone')
        full_name = context.user_data.get('full_name')
        user_chat_id = update.effective_chat.id

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}")
        logger.info(f"–§–ò–û: {full_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, Chat ID: {user_chat_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([full_name, phone, delivery_address]):
            await update.message.reply_text(f"{update.effective_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, "
                                            f"—á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.", parse_mode="Markdown")
            return ConversationHandler.END

        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        info_summary = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ:\n"
            f"–§–ò–û: {full_name};\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone};\n"
            f"–í–∞—à chat_id –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ: {user_chat_id};\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤–µ—Ä–Ω—ã:"
        )
        keyboard1 = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_info')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_info')]
        ]

        await update.message.reply_text(info_summary, reply_markup=InlineKeyboardMarkup(keyboard1))
        return INFO_CONFIRMATION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await update.message.reply_text(f"{update.effective_user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n"
                                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
        return ConversationHandler.END

async def confirm_info(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    telegram_chat_id = str(update.effective_user.id)
    full_name = context.user_data.get('full_name')
    phone = context.user_data.get('phone')
    delivery_address = context.user_data.get('delivery_address')

    if not all([full_name, phone, delivery_address]):
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.")
        return ConversationHandler.END
    try:
        user = context.user_data.get('user')
        if user is None:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {full_name}, {phone}, {delivery_address}")
        user_profile, created = await sync_to_async(UserProfile.objects.update_or_create)(
            user=user,
            defaults={
                'telegram_chat_id': telegram_chat_id,
                'full_name': full_name,
                'phone': phone,
                'delivery_address': delivery_address
            }
        )
        if created:
            await query.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        else:
            await query.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return ConversationHandler.END
    except IntegrityError as e:
        await sync_to_async(logger.error)(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await sync_to_async(logger.error)(f"–û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END


async def cancel_info(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
    await query.edit_message_text(text=f"{update.effective_user.first_name}, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –í–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞ *.", parse_mode="Markdown")
    return ConversationHandler.END


# async def handle_register(update: Update, context: CallbackContext) -> None:
#     """Redirect user to the registration page."""
#     query = update.callback_query
#     await query.answer()
#     await query.message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: http://127.0.0.1:8000/register")


async def handle_manage_orders(update: Update, context: CallbackContext) -> None:
    """Manage orders to the Admin panel."""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(f"{update.effective_user.first_name}, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏: *http://127.0.0.1:8000/admin*", parse_mode="Markdown")


async def start_order(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞.")
    query = update.callback_query
    await query.answer()

    if not is_within_working_hours():
        await query.message.reply_text(
            "–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ *–≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 9:00 –¥–æ 18:00)*.\n"
            "–ó–∞–∫–∞–∑—ã, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ *–≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è*, –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã *–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å*.", parse_mode="Markdown"
        )

    products = await sync_to_async(list)(Product.objects.all())
    if products:
        keyboard = [
            [InlineKeyboardButton(f" {product.name}   `{product.price} —Ä—É–±–ª–µ–π`", callback_data=f"product_{product.id}")]
        # keyboard = [
        #     [InlineKeyboardButton(f"{product.name} ({product.price}) —Ä—É–±.", callback_data=f"product_{product.id}")]
            for product in products
        ]
        await query.message.reply_text(f"{update.effective_user.first_name}, *–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        return SELECT_PRODUCT
    else:
        await query.message.reply_text(f"{update.effective_user.first_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç *—Ç–æ–≤–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã*.", parse_mode="Markdown")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def handle_product_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    try:
        await query.answer()
        product_id = int(query.data.split("_")[1])
        product = await sync_to_async(Product.objects.get)(id=product_id)
        context.user_data['product'] = product

        keyboard = [
            [InlineKeyboardButton("1", callback_data="quantity_1"),
             InlineKeyboardButton("2", callback_data="quantity_2"),
             InlineKeyboardButton("3", callback_data="quantity_3")],
            [InlineKeyboardButton("4", callback_data="quantity_4"),
             InlineKeyboardButton("5", callback_data="quantity_5")],
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é", callback_data="custom_quantity")]
        ]
        await query.edit_message_text(
            text=f"{update.effective_user.first_name}, –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: *{product.name}*. –í—ã–±–µ—Ä–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞*:",
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown"
        )
        return SELECT_QUANTITY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await query.message.reply_text("*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ *–µ—â–µ —Ä–∞–∑*.", parse_mode="Markdown")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def handle_quantity_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    quantity = int(query.data.split("_")[1])
    context.user_data['quantity'] = quantity

    product = context.user_data.get('product')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {quantity}")

    await query.message.reply_text(
        f"{update.effective_user.first_name}, –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: \n*{product.name}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: *{quantity}*\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏*:", parse_mode="Markdown"
    )
    return ASKING_ADDRESS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def handle_custom_quantity(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞*:", parse_mode="Markdown")
    return ASKING_CUSTOM_QUANTITY

async def ask_custom_quantity(update: Update, context: CallbackContext) -> int:
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        context.user_data['quantity'] = quantity

        product = context.user_data.get('product')
        await update.message.reply_text(
            f"{update.effective_user.first_name}, –í—ã –≤—ã–±—Ä–∞–ª–∏: *{product.name}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{quantity}*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏*:", parse_mode="Markdown"
        )
        return ASKING_ADDRESS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ* –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", parse_mode="Markdown")
        return ASKING_CUSTOM_QUANTITY

async def process_address_input(update: Update, context: CallbackContext) -> int:
    address = update.message.text
    context.user_data['address'] = address
    product = context.user_data.get('product')
    quantity = context.user_data.get('quantity')

    order_summary = (
        f"{update.effective_user.first_name}, –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä\n*{product.name}* \n(–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ *{quantity}* —à—Ç.).\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: *{address}*\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à –∑–∞–∫–∞–∑:*"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_order')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    await update.message.reply_text(order_summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return ORDER_CONFIRMATION

async def confirm_order(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    product = context.user_data.get('product')
    quantity = context.user_data.get('quantity')
    address = context.user_data.get('address')

    user, _ = await sync_to_async(User.objects.get_or_create)(username=query.from_user.username)
    order = await sync_to_async(Order.objects.create)(user=user, address=address)
    await sync_to_async(OrderItem.objects.create)(order=order, product=product, quantity=quantity)

    await query.edit_message_text(text=f"{update.effective_user.first_name}, –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä *'{product.name}'* \n–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ *{quantity}* —à—Ç. —É—Å–ø–µ—à–Ω–æ *—Å–æ–∑–¥–∞–Ω*!", parse_mode="Markdown")
    return ConversationHandler.END

async def cancel_order(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    await query.edit_message_text(text="{update.effective_user.first_name}, –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª *–æ—Ç–º–µ–Ω–µ–Ω*.", parse_mode="Markdown")
    return ConversationHandler.END

def setup_bot(button_handler=None):
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_order, pattern='^order$')],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(handle_product_selection, pattern='^product_')],
            SELECT_QUANTITY: [
                CallbackQueryHandler(handle_quantity_selection, pattern='^quantity_'),
                CallbackQueryHandler(handle_custom_quantity, pattern='^custom_quantity$')
            ],
            ASKING_CUSTOM_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_custom_quantity)],
            ASKING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_address_input)],
            ORDER_CONFIRMATION: [
                CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                CallbackQueryHandler(cancel_order, pattern='^cancel_order$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_order, pattern='^cancel_order$')],
        per_chat=True
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_register, pattern='register'),
        ],
        states={
            ASKING_FULL_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_full_name)
            ],
            ASKING_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)
            ],
            ASKING_ADDRESS0: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_address)
            ],
            INFO_CONFIRMATION: [
                CallbackQueryHandler(confirm_info, pattern='^confirm_info$'),
                CallbackQueryHandler(cancel_info, pattern='^cancel_info$')
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_info, pattern='^cancel_info$')
        ],
        allow_reentry=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(conversation_handler)
    # Add these handlers to the application in the main function or where you initialize your handlers
    application.add_handler(CallbackQueryHandler(handle_catalog, pattern='^catalog$'))
    application.add_handler(CallbackQueryHandler(handle_status, pattern='^status$'))
    application.add_handler(CallbackQueryHandler(handle_help, pattern='^help$'))
    # application.add_handler(CallbackQueryHandler(handle_register, pattern='^register$'))
    application.add_handler(CallbackQueryHandler(handle_manage_orders, pattern='^manage_orders$'))
    application.add_handler(CallbackQueryHandler(button_handler))
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
    print('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    application.run_polling()

if __name__ == "__main__":
    setup_bot()
